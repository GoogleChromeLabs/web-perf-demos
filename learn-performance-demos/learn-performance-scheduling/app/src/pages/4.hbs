<div>
  <p>
    In the previous examples, even when yielding to the main thread in between
    tasks, there were a number of long tasks. If the user interacts with the
    <code>&lt;input&gt;</code>
    element while these tasks are running, they are likely to experience jank
    and an unresponsive page.
  </p>
  <p>
    This demo yields every 50 milliseconds—the long task boundary—while
    <code>filterResults</code>. This allows the browser to handle user input and
    render critical updates while the
    <code>filterResults</code>
    is running.
  </p>
  <div class="demo">
    <div class="input-pane">
      <input
        id="search"
        type="text"
        placeholder="Search..."
        autocomplete="off"
      />
      <img
        id="animation"
        src="https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/spinner.svg?v=1708439812353"
        width="24"
        height="24"
        class="spinner"
      />
      <label><input id="hide-animation" type="checkbox" />Hide animation</label>
    </div>
    <div class="results-pane">
      <ul id="list"></ul>
    </div>
  </div>
  <p>
    If you observe the performance tab, you can notice that
    <code>filterResults</code>
    is now broken into smaller tasks.
  </p>
  <p>
    <img
      src="https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/Learn%20Performance%20-%20Scheduling%20-%20deadline.png?v=1714728414835"
      alt="Chrome DevTools Performance panel showing five tasks. filterResults is divided into two tasks."
      width="960"
      height="154"
      loading="lazy"
    />
  </p>
  <p>
    In the performance panel above, the
    <code>filterResults</code>
    task is divided into 3 tasks. Each task is approximately (or under) 50
    milliseconds—the long task threshold. This results in a smooth user
    experience. However,
    <code>renderList</code>
    and Recalculate Style and Layout still cause a long task.
  </p>
  {{! prettier-ignore }}
  <p>
    <details>
      <summary>View Source Code</summary>      
      <pre><code>const sort = async (data) =&gt; {
  // set a 50ms deadline
  let deadline = performance.now() + 50;

  for (let i = 1; i &lt; data.length; i++) {
    if (performance.now() &gt;= deadline) {
      // update the deadline
      deadline = performance.now() + 50;
      await yieldToMain();
    }

    const key = data[i];
    let j;

    for (j = i - 1; j &gt;= 0 &amp;&amp; data[j].relevance &lt; key.relevance; j--) {
      data[j + 1] = data[j];
    }

    data[j + 1] = key;
  }

  return data;
}</code></pre>
    </details>
  </p>
</div>
{{! prettier-ignore }}
<script>
  document.getElementById("hide-animation").addEventListener("change", () => {
    document.getElementById("animation").classList.toggle("hide");
  });
</script>
{{! prettier-ignore }}
<script type="module">
  function yieldToMain () {
    return new Promise(resolve => {
      setTimeout(resolve, 0);
    });
  }

  // fetch and store the data in memory
  const initial = await fetch(
    "https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/data.json?v=1708550781857",
    {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    }
  ).then((response) => response.json());

  // compare similarity between two strings
  // source: https://github.com/stephenjjbrown/string-similarity-js
  const stringSimilarity = (
    str1,
    str2,
    substringLength = 2,
    caseSensitive = false
  ) => {
    if (!caseSensitive) {
      str1 = str1.toLowerCase();
      str2 = str2.toLowerCase();
    }

    if (str1.length < substringLength || str2.length < substringLength)
      return 0;

    const map = new Map();
    for (let i = 0; i < str1.length - (substringLength - 1); i++) {
      const substr1 = str1.substr(i, substringLength);
      map.set(substr1, map.has(substr1) ? map.get(substr1) + 1 : 1);
    }

    let match = 0;
    for (let j = 0; j < str2.length - (substringLength - 1); j++) {
      const substr2 = str2.substr(j, substringLength);
      const count = map.has(substr2) ? map.get(substr2) : 0;
      if (count > 0) {
        map.set(substr2, count - 1);
        match++;
      }
    }

    return (
      (match * 2) / (str1.length + str2.length - (substringLength - 1) * 2)
    );
  };
  
  // sort the results by relevance to the search term
  // ATTN: insertion sort has a time complexity of O(n^2)
  const sort = async (data) => {
    // set a 50ms deadline
    let deadline = performance.now() + 50;
    
    for (let i = 1; i < data.length; i++) {
      if (performance.now() >= deadline) {
        // update the deadline
        deadline = performance.now() + 50;
        await yieldToMain();
      }
      
      const key = data[i];
      let j;

      for (j = i - 1; j >= 0 && data[j].relevance < key.relevance; j--) {
        data[j + 1] = data[j];
      }

      data[j + 1] = key;
    }

    return data;
  }

  // filter the results
  const filterResults = async (data, searchTerm, limit) => {
    const relevanceArray = data.map((n) => ({
      ...n,
      relevance: stringSimilarity(`${n.firstName} ${n.lastName}`, searchTerm),
    }));

    await yieldToMain();
    
    const results =  await sort(relevanceArray);
    return results.slice(0, limit);
  };

  // render the HTML
  const renderList = (root, data) => {
    let itemsHTML = "";
    // clear the list
    root.innerHTML = "";
    for (let i = 0; i < data.length; i++) {
      // create the HTML for each li
      itemsHTML += `<li>${data[i].firstName} ${data[i].lastName}</li>`;
    }

    root.innerHTML = itemsHTML;
  };

  document.getElementById("search").addEventListener("keyup", async (e) => {
    const value = e.target.value.toLowerCase();

    // yield to main thread
    await yieldToMain();
    const filteredResults = await filterResults(initial, value, 500);

    // yield to main thread
    await yieldToMain();
    renderList(document.getElementById("list"), filteredResults);
  });
</script>