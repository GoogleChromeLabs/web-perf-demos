<div>
  <p>
    This demo extends on the
    <a href="/1">previous demo</a>
    but yields to the main thread after each
    <code>keyup</code>
    event by wrapping the
    <code>filterResults</code>
    in a
    <code>setTimeout</code>.
  </p>
  <p>
    The result of this optimization is that if the main thread is idle, the user
    input is immediately painted to screenâ€”before the results are filtered. You
    can observe this by inputting a single character.
  </p>
  <p>
    However, when inputting multiple characters in quick succession, it will not
    feel responsive as the main thread is busy processing the long tasks
    generated from the earlier
    <code>keyup</code>
    events. The main thread is blocked and no visual updates are painted until
    the long task completes.
  </p>
  <div class="demo">
    <div class="input-pane">
      <input
        id="search"
        type="text"
        placeholder="Search..."
        autocomplete="off"
      />
      <img
        id="animation"
        src="https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/spinner.svg?v=1708439812353"
        width="24"
        height="24"
        class="spinner"
      />
      <label><input id="hide-animation" type="checkbox" />Hide animation</label>
    </div>
    <div class="results-pane">
      <ul id="list"></ul>
    </div>
  </div>
  <p>
    If you observe the Performance tab while interacting with the page, you
    should notice that when the main thread is idle, the browser will schedule a
    layout and paint immediately after the user interaction, resulting in a good
    <a href="https://web.dev/articles/inp">INP</a>
    and a responsive page. The results are filtered and updated short
    afterwards. However, if the main thread is busy processing an earlier
    interaction, then the successive ones will feel janky.
  </p>
  <p>
    <img
      src="https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/Learn%20Performance%20-%20Scheduling%20-%20setTimeout.png?v=1714663391084"
      alt="Chrome DevTools Performance panel showing a Keyboard interaction and three tasks."
      width="916"
      height="196"
      loading="lazy"
    />
  </p>
  <p>
    If you observe the preceding screenshot, you can notice two
    <i>Keyboard</i>
    interactions. The first one is short and the screen is updated almost
    immediately. However, this interaction generates a long task that blocks the
    main thread. When the second keyboard interaction is received, it incurs a
    lengthy input delay as the browser needs to finish executing the long
    task before it can handle the user input.
  </p>
  {{! prettier-ignore }}
  <p>
    <details>
      <summary>View Source Code</summary>      
      <pre><code>document.getElementById(&quot;search&quot;).addEventListener(&quot;keyup&quot;, (e) =&gt; {
  const value = e.target.value.toLowerCase();

  // yield to main thread
  setTimeout(() =&gt; {
    const filteredResults = filterResults(initial, value, 500);
    renderList(document.getElementById(&quot;list&quot;), filteredResults);
  });
});</code></pre>
    </details>
  </p>
</div>
{{! prettier-ignore }}
<script>
  document.getElementById("hide-animation").addEventListener("change", () => {
    document.getElementById("animation").classList.toggle("hide");
  });
</script>
{{! prettier-ignore }}
<script type="module">
  // fetch and store the data in memory
  const initial = await fetch(
    "https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/data.json?v=1708550781857",
    {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    }
  ).then((response) => response.json());

  // compare similarity between two strings
  // source: https://github.com/stephenjjbrown/string-similarity-js
  const stringSimilarity = (
    str1,
    str2,
    substringLength = 2,
    caseSensitive = false
  ) => {
    if (!caseSensitive) {
      str1 = str1.toLowerCase();
      str2 = str2.toLowerCase();
    }

    if (str1.length < substringLength || str2.length < substringLength)
      return 0;

    const map = new Map();
    for (let i = 0; i < str1.length - (substringLength - 1); i++) {
      const substr1 = str1.substr(i, substringLength);
      map.set(substr1, map.has(substr1) ? map.get(substr1) + 1 : 1);
    }

    let match = 0;
    for (let j = 0; j < str2.length - (substringLength - 1); j++) {
      const substr2 = str2.substr(j, substringLength);
      const count = map.has(substr2) ? map.get(substr2) : 0;
      if (count > 0) {
        map.set(substr2, count - 1);
        match++;
      }
    }

    return (
      (match * 2) / (str1.length + str2.length - (substringLength - 1) * 2)
    );
  };

  // sort the results by relevance to the search term
  // ATTN: insertion sort has a time complexity of O(n^2)
  const sort = (data) => {
    for (let i = 1; i < data.length; i++) {
      const key = data[i];
      let j;

      for (j = i - 1; j >= 0 && data[j].relevance < key.relevance; j--) {
        data[j + 1] = data[j];
      }

      data[j + 1] = key;
    }

    return data;
  }

  // filter the results
  const filterResults = (data, searchTerm, limit) => {
    const relevanceArray = data.map((n) => ({
      ...n,
      relevance: stringSimilarity(`${n.firstName} ${n.lastName}`, searchTerm),
    }));

    return sort(relevanceArray).slice(0, limit);
  };

  // render the HTML
  const renderList = (root, data) => {
    let itemsHTML = "";
    // clear the list
    root.innerHTML = "";
    for (let i = 0; i < data.length; i++) {
      // create the HTML for each li
      itemsHTML += `<li>${data[i].firstName} ${data[i].lastName}</li>`;
    }

    root.innerHTML = itemsHTML;
  };

  document.getElementById("search").addEventListener("keyup", (e) => {
    const value = e.target.value.toLowerCase();

    // yield to main thread
    setTimeout(() => {
      const filteredResults = filterResults(initial, value, 500);
      renderList(document.getElementById("list"), filteredResults);
    });
  });
</script>