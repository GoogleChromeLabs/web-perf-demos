<div>
  <p>
    As seen in the previous example, there is still a long task when the browser
    paints the update to the screen. This is known as the presentation delay.
  </p>
  <p>
    You can reduce the presentation delay by minimizing the Style and Layout
    work required by the browser. In the examples you have seen so far, the
    <code>renderList</code>
    function adds 500
    <code>&lt;li&gt;</code>
    elements to the page in one go. You could update this function to add the
    elements that are visible in the initial scroll position first; and then add
    the remaining elements after yielding to the main threadâ€”allowing the
    browser to handle critical updates.
  </p>
  <div class="demo">
    <div class="input-pane">
      <input
        id="search"
        type="text"
        placeholder="Search..."
        autocomplete="off"
      />
      <img
        id="animation"
        src="https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/spinner.svg?v=1708439812353"
        width="24"
        height="24"
        class="spinner"
      />
      <label><input id="hide-animation" type="checkbox" />Hide animation</label>
    </div>
    <div class="results-pane">
      <ul id="list"></ul>
    </div>
  </div>
  <p>
    If you observe the DevTools performance panel, you can notice that
    Recalculate Style and Layout is broken down into multiple chunks.
  </p>
  <p>
    <img
      src="https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/Learn%20Performance%20-%20Scheduling%20-%20Presentation%20Delay.png?v=1714730226257"
      alt="Chrome DevTools Performance panel showing five tasks. filterResults is divided into two tasks."
      width="978"
      height="154"
      loading="lazy"
    />
  </p>
  <p>
    In the screenshot above, the
    <code>renderList</code>
    function, which is responsible for updating the DOM, is broken down into
    multiple tasks instead of the single, long task from the previous example.
    This also results in the Recalculate Style and Paint being distributed among
    many smaller tasks. This reduces the presentation delay and the page should
    feel more responsive.
  </p>
  {{! prettier-ignore }}
  <p>
    <details>
      <summary>View Source Code</summary>      
      <pre><code>const renderList = async (root, data) =&gt; {
  let itemsHTML = &quot;&quot;;
  // clear the list
  root.innerHTML = &quot;&quot;;

  let index = 0;
  const BATCH_SIZE = 100;

  // iterate the data array in batches of 100
  while (index &lt; data.length) {
    for (let i = index; i &lt; Math.min(index + BATCH_SIZE, data.length); i++) {
      // create the HTML for each li
      root.insertAdjacentHTML(&quot;beforeend&quot;, `&lt;li&gt;${data[i].firstName} ${data[i].lastName}&lt;/li&gt;`);      
    }
    index += BATCH_SIZE;
    await yieldToMain();
  }
};</code></pre>
    </details>
  </p>
</div>
{{! prettier-ignore }}
<script>
  document.getElementById("hide-animation").addEventListener("change", () => {
    document.getElementById("animation").classList.toggle("hide");
  });
</script>
{{! prettier-ignore }}
<script type="module">
  function yieldToMain () {
    return new Promise(resolve => {
      setTimeout(resolve, 0);
    });
  }

  // fetch and store the data in memory
  const initial = await fetch(
    "https://cdn.glitch.global/51cfd243-2e84-482b-86d1-b78a29ac1698/data.json?v=1708550781857",
    {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    }
  ).then((response) => response.json());

  // compare similarity between two strings
  // source: https://github.com/stephenjjbrown/string-similarity-js
  const stringSimilarity = (
    str1,
    str2,
    substringLength = 2,
    caseSensitive = false
  ) => {
    if (!caseSensitive) {
      str1 = str1.toLowerCase();
      str2 = str2.toLowerCase();
    }

    if (str1.length < substringLength || str2.length < substringLength)
      return 0;

    const map = new Map();
    for (let i = 0; i < str1.length - (substringLength - 1); i++) {
      const substr1 = str1.substr(i, substringLength);
      map.set(substr1, map.has(substr1) ? map.get(substr1) + 1 : 1);
    }

    let match = 0;
    for (let j = 0; j < str2.length - (substringLength - 1); j++) {
      const substr2 = str2.substr(j, substringLength);
      const count = map.has(substr2) ? map.get(substr2) : 0;
      if (count > 0) {
        map.set(substr2, count - 1);
        match++;
      }
    }

    return (
      (match * 2) / (str1.length + str2.length - (substringLength - 1) * 2)
    );
  };
  
  // sort the results by relevance to the search term
  // ATTN: insertion sort has a time complexity of O(n^2)
  const sort = async (data) => {
    // set a 50ms deadline
    let deadline = performance.now() + 50;
    
    for (let i = 1; i < data.length; i++) {
      if (performance.now() >= deadline) {
        // update the deadline
        deadline = performance.now() + 50;
        await yieldToMain();
      }
      
      const key = data[i];
      let j;

      for (j = i - 1; j >= 0 && data[j].relevance < key.relevance; j--) {
        data[j + 1] = data[j];
      }

      data[j + 1] = key;
    }

    return data;
  }

  // filter the results
  const filterResults = async (data, searchTerm, limit) => {
    const relevanceArray = data.map((n) => ({
      ...n,
      relevance: stringSimilarity(`${n.firstName} ${n.lastName}`, searchTerm),
    }));

    await yieldToMain();
    
    const results =  await sort(relevanceArray);
    return results.slice(0, limit);
  };

  // render the HTML
  const renderList = async (root, data) => {
    let itemsHTML = "";
    // clear the list
    root.innerHTML = "";
    
    let index = 0;
    const BATCH_SIZE = 100;
    
    // iterate the data array in batches of 100
    while (index < data.length) {
      for (let i = index; i < Math.min(index + BATCH_SIZE, data.length); i++) {
        // create the HTML for each li
        root.insertAdjacentHTML("beforeend", `<li>${data[i].firstName} ${data[i].lastName}</li>`);      
      }
      index += BATCH_SIZE;
      await yieldToMain();
    }
  };

  document.getElementById("search").addEventListener("keyup", async (e) => {
    const value = e.target.value.toLowerCase();

    // yield to main thread
    await yieldToMain();
    const filteredResults = await filterResults(initial, value, 500);

    // yield to main thread
    await yieldToMain();
    renderList(document.getElementById("list"), filteredResults);
  });
</script>