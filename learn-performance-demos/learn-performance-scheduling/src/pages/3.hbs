<div>
  <p>
    This demo adds an additional yield point between long tasks to reduce the
    duration of long task. This minimizes the time the main thread is blocked
    and user input can be handled earlier. This is done using the function:
    {{! prettier-ignore }}
    <pre><code>function yieldToMain () {
  return new Promise(resolve =&gt; {
    setTimeout(resolve, 0);
  });
}</code></pre>
  </p>
  <p>
    By wrapping
    <code>setTimeout</code>
    in an immediately resolving
    <code>Promise</code>
    provides better ergonomics than nesting
    <code>setTimeout</code>
    calls.
  </p>
  <div class="demo">
    <div class="input-pane">
      <input
        id="search"
        type="text"
        placeholder="Search..."
        autocomplete="off"
      />
      <img
        id="animation"
        src="./spinner.svg?v=1708439812353"
        width="24"
        height="24"
        class="spinner"
      />
      <label><input id="hide-animation" type="checkbox" />Hide animation</label>
    </div>
    <div class="results-pane">
      <ul id="list"></ul>
    </div>
  </div>
  <p>
    If you observe the performance tab, you can notice that
    <code>filterResults</code>
    and
    <code>renderList</code>
    are now placed in two separate tasks, allowing the browser to paint any
    critical updates in between tasks.
  </p>
  <p>
    <img
      src="./Learn%20Performance%20-%20Scheduling%20-%20yieldToMain.png?v=1714664350349"
      alt="Chrome DevTools Performance panel showing two tasks. filterResults is highlighted in the first task and renderList is highlighted in the second task."
      width="916"
      height="196"
      loading="lazy"
    />
  </p>
  <p>
    In the performance panel above, the
    <code>filterResults</code>
    and
    <code>renderList</code>
    are no longer combined in a single task, but broken down into two
    shorter tasks. There are still a number of long tasks that need to be broken down further.
  </p>
  {{! prettier-ignore }}
  <p>
    <details>
      <summary>View Source Code</summary>
      <pre><code>function yieldToMain () {
  return new Promise(resolve =&gt; {
    setTimeout(resolve, 0);
  });
}

document.getElementById(&quot;search&quot;).addEventListener(&quot;keyup&quot;, async (e) =&gt; {
  const value = e.target.value.toLowerCase();

  // yield to main thread
  await yieldToMain();
  const filteredResults = filterResults(initial, value, 500);

  // yield to main thread
  await yieldToMain();
  renderList(document.getElementById(&quot;list&quot;), filteredResults);
});</code></pre>
    </details>
  </p>
</div>
{{! prettier-ignore }}
<script>
  document.getElementById("hide-animation").addEventListener("change", () => {
    document.getElementById("animation").classList.toggle("hide");
  });
</script>
{{! prettier-ignore }}
<script type="module">
  function yieldToMain () {
    return new Promise(resolve => {
      setTimeout(resolve, 0);
    });
  }

    // fetch and store the data in memory
  const initial = await fetch(
    "./data.json?v=1708550781857",
    {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    }
  ).then((response) => response.json());

  // compare similarity between two strings
  // source: https://github.com/stephenjjbrown/string-similarity-js
  const stringSimilarity = (
    str1,
    str2,
    substringLength = 2,
    caseSensitive = false
  ) => {
    if (!caseSensitive) {
      str1 = str1.toLowerCase();
      str2 = str2.toLowerCase();
    }

    if (str1.length < substringLength || str2.length < substringLength)
      return 0;

    const map = new Map();
    for (let i = 0; i < str1.length - (substringLength - 1); i++) {
      const substr1 = str1.substr(i, substringLength);
      map.set(substr1, map.has(substr1) ? map.get(substr1) + 1 : 1);
    }

    let match = 0;
    for (let j = 0; j < str2.length - (substringLength - 1); j++) {
      const substr2 = str2.substr(j, substringLength);
      const count = map.has(substr2) ? map.get(substr2) : 0;
      if (count > 0) {
        map.set(substr2, count - 1);
        match++;
      }
    }

    return (
      (match * 2) / (str1.length + str2.length - (substringLength - 1) * 2)
    );
  };

  // sort the results by relevance to the search term
  // ATTN: insertion sort has a time complexity of O(n^2)
  const sort = (data) => {
    for (let i = 1; i < data.length; i++) {
      const key = data[i];
      let j;

      for (j = i - 1; j >= 0 && data[j].relevance < key.relevance; j--) {
        data[j + 1] = data[j];
      }

      data[j + 1] = key;
    }

    return data;
  }

  // filter the results
  const filterResults = (data, searchTerm, limit) => {
    const relevanceArray = data.map((n) => ({
      ...n,
      relevance: stringSimilarity(`${n.firstName} ${n.lastName}`, searchTerm),
    }));

    return sort(relevanceArray).slice(0, limit);
  };

  // render the HTML
  const renderList = (root, data) => {
    let itemsHTML = "";
    // clear the list
    root.innerHTML = "";
    for (let i = 0; i < data.length; i++) {
      // create the HTML for each li
      itemsHTML += `<li>${data[i].firstName} ${data[i].lastName}</li>`;
    }

    root.innerHTML = itemsHTML;
  };

  document.getElementById("search").addEventListener("keyup", async (e) => {
    const value = e.target.value.toLowerCase();

    // Yield to the main thread
    await yieldToMain();
    const filteredResults = filterResults(initial, value, 500);

    await yieldToMain();
    renderList(document.getElementById("list"), filteredResults);
  });
</script>
